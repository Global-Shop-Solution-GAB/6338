Program.Sub.Preflight.Start
Program.External.Include.Library("ORDUPL.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_6338_ProNestQuoteImport.g2u
'Trey S
'2021-04-27
'For Metro Steel
'Quote - 12739
'Ticket - MET240-21220211545-0
'This script is to import a quote from a ProNest Export CSV file.
'File has multiple headers
'File sample:
'QuoteNumber,Customer ID,,Quote.Created,Quote.Expire,Contact,Address1,Address2,City,State,Zip,CustomerPO,TotalPrice,PrepardByID,PreparedBy
'10132100,1,,10/13/2021,11/12/2021,,,,,,,,"$1,624.10",1,Adam Nesmith
'ItemID,PartName,Quantity,UnitPrice,ExtendedPrice,QuoteNumber,UnitCost,TotalCost,MaterialMU,ProductionMU,Material.Name,Thickness,Grade,Part.Length,Part.Width,Weight,RectWeight,PartArea,RectArea,AllocateArea,MachineName,ProductionTime,AllocatedWeight,PrimeCode,ProductionCost
'1,ClippedRectangle.vsp,5,120.91,$604.54,10132100,$120.91,$604.54,0,0,MS,0.25,,10.00,5.00,3.32,3.55,46.87,3.55,612.33,LAS2,0:00:09,43.41,,$524.69
'2,RoundedRectangle.vsp,5,104.94,$524.72,10132100,$104.94,$524.72,0,0,MS,0.25,,10.00,5.00,3.45,3.55,48.66,3.55,445.24,LAS2,0:00:09,31.57,,$524.69
'3,TombstoneRectangle.vsp,5,98.97,$494.84,10132100,$98.97,$494.84,0,0,MS,0.25,,10.00,5.00,3.50,3.63,49.33,3.63,382.42,LAS2,0:00:09,27.11,,$524.69
'ItemID,PartName,SecondaryProcess,SPUnitCost,SPExtendCost,SPFixedTime,SPVariableTime
'1,ClippedRectangle.vsp,BEV1 -BEVELER,$21.00,$105.00,0:20:00,0:10:00
'1,ClippedRectangle.vsp,MIL1 -MACHINE,$40.00,$200.00,0:00:00,0:20:00
'2,RoundedRectangle.vsp,BEV1 -BEVELER,$21.00,$105.00,0:20:00,0:10:00
'2,RoundedRectangle.vsp,MIL1 -MACHINE,$40.00,$200.00,0:00:00,0:20:00
'3,TombstoneRectangle.vsp,BEV1 -BEVELER,$21.00,$105.00,0:20:00,0:10:00
'3,TombstoneRectangle.vsp,MIL1 -MACHINE,$40.00,$200.00,0:00:00,0:20:00

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.bLocked.Declare(Boolean)

Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

'first grab file from user
F.Global.Registry.AddValue(V.Caller.User, V.Caller.CompanyCode, "GCG_6338_ProNestQuoteImport.g2u", 6338, 0, False, "", False, 0, 0, V.Ambient.MinDate, V.Ambient.MinDate)
F.Intrinsic.UI.ShowOpenFileDialog("", "CSV|*.csv", V.Local.sFile)
F.Intrinsic.Control.If(V.Local.sFile.IsNotCancel)
	F.Intrinsic.File.IsFileLocked(V.Local.sFile, V.Local.bLocked)
	F.Intrinsic.Control.If(V.Local.bLocked.Not)
		F.Intrinsic.Control.CallSub(ParseFile, "File", V.Local.sFile)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("This file is locked and cannot be read. Please close the file and any processes accessing it and try again.")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.ParseFile.Start
F.Intrinsic.Control.Try

V.Local.sContents.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sTypes.Declare(String, "String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String*!*String")
V.Local.iDataTable.Declare(Long)
V.Local.sQuoteFields.Declare(String, "QuoteNumber,Customer ID,CustomerName,Quote.Created,Quote.Expire,Contact,Address1,Address2,City,State,Zip,CustomerPO,TotalPrice,PrepardByID,PreparedBy")
V.Local.sLineFields.Declare(String, "ItemID,PartName,Quantity,UnitPrice,ExtendedPrice,QuoteNumber,UnitCost,TotalCost,MaterialMU,ProductionMU,Material.Name,Thickness,Grade,Part.Length,Part.Width,Weight,RectWeight,PartArea,RectArea,AllocateArea,Machine Name,ProductionTime,AllocatedWeight,PrimeCode,ProductionCost")
V.Local.sRouterFields.Declare(String, "ItemID,PartName,SecondaryProcess,SPUnitCost,SPExtendCost,SPFixedTime,SPVariableTime")
V.Local.sQuoteData.Declare(String)
V.Local.sLineData.Declare(String)
V.Local.sRouterData.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sTempPath.Declare(String)
V.Local.sTempFile.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.bUpload.Declare(Boolean)
V.Local.sQuote.Declare(String, "")
V.Local.sCustomer.Declare(String, "")

'read in file, split on empty line
F.Intrinsic.File.File2String(V.Args.File, V.Local.sContents)
F.Intrinsic.Control.CallSub(LoadDataTables)

'loop through lines
'iDataTable counts which datatable we're on... 0 - quote, 1 - lines, 2 - router
F.Intrinsic.StringBuilder.Create("0")
F.Intrinsic.StringBuilder.Create("1")
F.Intrinsic.StringBuilder.Create("2")
F.Intrinsic.String.Split(V.Local.sContents, V.Ambient.NewLine, V.Local.sContents)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sContents.UBound, 1)
	F.Intrinsic.Control.If(V.Local.sContents(V.Local.iCounter).Trim, !=, "")
		F.Intrinsic.Control.If(V.Local.sContents(V.Local.iCounter).Left11, =, V.Local.sQuoteFields.Left11)
			V.Local.iDataTable.Set(0)
		F.Intrinsic.Control.ElseIf(V.Local.sContents(V.Local.iCounter).Left17, =, V.Local.sLineFields.Left17)
			V.Local.iDataTable.Set(1)
		F.Intrinsic.Control.ElseIf(V.Local.sContents(V.Local.iCounter).Left17, =, V.Local.sRouterFields.Left17, "OR", V.Local.sContents(V.Local.iCounter).Left11, =, "SPFixedTime")
			V.Local.iDataTable.Set(2)
		F.Intrinsic.Control.EndIf
		
		'F.Intrinsic.String.Split(V.Local.sContents(V.Local.iCounter), ",", V.Local.sTemp)
		'V.Local.sTemp.RedimPreserve(0, 21)
		'F.Intrinsic.String.Join(V.Local.sTemp, ",", V.Local.sContents(V.Local.iCounter))
		'V.Local.sTemp.Redim(0, 0)
		F.Intrinsic.StringBuilder.AppendLine(V.Local.iDataTable, V.Local.sContents(V.Local.iCounter))
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.iCounter)

V.Local.sContents.Redim(0, 0)
F.Intrinsic.StringBuilder.ToString("0", V.Local.sQuoteData)
F.Intrinsic.StringBuilder.ToString("1", V.Local.sLineData)
F.Intrinsic.StringBuilder.ToString("2", V.Local.sRouterData)
F.Intrinsic.StringBuilder.Dispose("0")
F.Intrinsic.StringBuilder.Dispose("1")
F.Intrinsic.StringBuilder.Dispose("2")

'build temp CSV path
F.Intrinsic.String.Build("{0}\Custom\6338\{1}\Temp", V.Caller.GlobalDir, V.Caller.CompanyCode, V.Local.sTempPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sTempPath)

'load quote datatable
F.Intrinsic.String.Replace(V.Local.sQuoteData, "$", "", V.Local.sQuoteData)
F.Intrinsic.String.Build("{0}\QuoteHeader_{1}.csv", V.Local.sTempPath, V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS, V.Local.sTempFile)
F.Intrinsic.File.String2File(V.Local.sTempFile, V.Local.sQuoteData)
F.Data.DataTable.CreateFromCSV("dtTemp", V.Local.sTempFile, V.DataTable.dtQuote.FieldNames, V.Local.sTypes, False)
F.Intrinsic.File.DeleteFile(V.Local.sTempFile)

'delete header and empty last row
F.Data.DataTable.DeleteRow("dtTemp", 0)
F.Data.DataTable.Merge("dtTemp", "dtQuote", False, 2)
F.Data.DataTable.Close("dtTemp")

'load lines datatable
F.Intrinsic.String.Replace(V.Local.sLineData, "$", "", V.Local.sLineData)
F.Intrinsic.String.Replace(V.Local.sLineData, ".vsp", "", V.Local.sLineData)
F.Intrinsic.String.Build("{0}\QuoteLines_{1}.csv", V.Local.sTempPath, V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS, V.Local.sTempFile)
F.Intrinsic.File.String2File(V.Local.sTempFile, V.Local.sLineData)
F.Data.DataTable.CreateFromCSV("dtTemp", V.Local.sTempFile, V.DataTable.dtQuoteLines.FieldNames, V.Local.sTypes, False)
F.Intrinsic.File.DeleteFile(V.Local.sTempFile)
F.Data.DataTable.DeleteRow("dtTemp", 0)
F.Data.DataTable.Merge("dtTemp", "dtQuoteLines", False, 2)
F.Data.DataTable.Close("dtTemp")

'load router datatable
F.Intrinsic.String.Replace(V.Local.sRouterData, "$", "", V.Local.sRouterData)
F.Intrinsic.String.Replace(V.Local.sRouterData, ".vsp", "", V.Local.sRouterData)
F.Intrinsic.String.Build("{0}\RouterLines{1}.csv", V.Local.sTempPath, V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS, V.Local.sTempFile)
F.Intrinsic.File.String2File(V.Local.sTempFile, V.Local.sRouterData)
F.Data.DataTable.CreateFromCSV("dtTemp", V.Local.sTempFile, V.DataTable.dtRouterLines.FieldNames, V.Local.sTypes, False)
F.Intrinsic.File.DeleteFile(V.Local.sTempFile)

F.Intrinsic.Control.If(V.DataTable.dtTemp.RowCount, >, 0)
	F.Data.DataTable.DeleteRow("dtTemp", 0)
	F.Data.DataTable.Merge("dtTemp", "dtRouterLines", False, 2)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf

'convert to hours
F.Data.DataTable.AddExpressionColumn("dtQuoteLines", "PRODUCTION_TIME", "Float", "Convert(Substring([PRODUCTION_TIME_TEMP], 1, 1), 'System.Double') + (Convert(Substring([PRODUCTION_TIME_TEMP], 3, 2), 'System.Double') / 60) + (Convert(Substring([PRODUCTION_TIME_TEMP], 6, 2), 'System.Double') / 3600)")
F.Data.DataTable.AddExpressionColumn("dtRouterLines", "FIXED_TIME", "Float", "Convert(Substring([FIXED_TIME_TEMP], 1, 1), 'System.Double') + (Convert(Substring([FIXED_TIME_TEMP], 3, 2), 'System.Double') / 60) + (Convert(Substring([FIXED_TIME_TEMP], 6, 2), 'System.Double') / 3600)")
F.Data.DataTable.AddExpressionColumn("dtRouterLines", "VARIABLE_TIME", "Float", "Convert(Substring([VARIABLE_TIME_TEMP], 1, 1), 'System.Double') + (Convert(Substring([VARIABLE_TIME_TEMP], 3, 2), 'System.Double') / 60) + (Convert(Substring([VARIABLE_TIME_TEMP], 6, 2), 'System.Double') / 3600)")

F.Data.DataTable.SetValue("dtQuote", -1, "FILE", V.Args.File)
F.Data.DataTable.SetValue("dtRouterLines", -1, "QUOTE", V.DataTable.dtQuote(0).QUOTE!FieldValTrim)

F.Intrinsic.String.Build("select RTRIM(QUOTE), RTRIM(GSS_QUOTE) from GCG_6338_QUOTES where QUOTE = '{0}'", V.DataTable.dtQuote(0).QUOTE!FieldValTrim, V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "Connect", True)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.CallSub(Connection, "Connect", False)

F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	F.Intrinsic.String.Build("ProNest Quote [{0}] has already been uploaded as GSS Quote [{1}]. Update it?", V.DataTable.dtQuote(0).QUOTE!FieldValTrim, V.Local.sRet(1).Trim, V.Local.sMessage)
	
	F.Intrinsic.UI.Msgbox(V.Local.sMessage, "Warning", 4, V.Local.iRet)
	F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
		'grab the customer
		F.Intrinsic.String.Build("select RTRIM(CUSTOMER) from V_QUOTE_HEADER where QUOTE_NO = '{0}'", V.Local.sRet(1).Trim, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(Connection, "Connect", True)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sCustomer)
		F.Intrinsic.Control.CallSub(Connection, "Connect", False)
		
		'delete quote
		F.Intrinsic.Control.CallSub(DeleteQuote, "Quote", V.Local.sRet(1).Trim)
		V.Local.bUpload.Set(True)
		V.Local.sQuote.Set(V.Local.sRet(1).Trim)
	F.Intrinsic.Control.Else
		V.Local.bUpload.Set(False)
	F.Intrinsic.Control.EndIf
	V.Local.sRet.Redim(0, 0)
F.Intrinsic.Control.Else
	V.Local.bUpload.Set(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bUpload)
	F.Intrinsic.Control.CallSub(Upload, "QUOTE", V.Local.sQuote, "Customer", V.Local.sCustomer)
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("dtQuote")
F.Data.DataTable.Close("dtQuoteLines")
F.Data.DataTable.Close("dtRouterLines")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.ParseFile.End

Program.Sub.Upload.Start
'add records to ORDUPL datatables

F.Intrinsic.Control.Try

V.Local.sOrderDate.Declare(String)
V.Local.sDueDate.Declare(String)
V.Local.iLine.Declare(Long, 0)
V.Local.sLine.Declare(String)
V.Local.sPrice.Declare(String)
V.Local.sCost.Declare(String)
V.Local.sLength.Declare(String)
V.Local.sWidth.Declare(String)
V.Local.sWeight.Declare(String)
V.Local.sExtension.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sQuantity.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sQuote.Declare(String, "")
V.Local.bCancel.Declare(Boolean, False)

'need to check customer
F.Intrinsic.String.Build("select RTRIM(CUSTOMER) from V_CUSTOMER_MASTER where CUSTOMER = '{0}'", V.DataTable.dtQuote(0).CUSTOMER_ID!FieldValTrim, V.Local.sSQL)
F.Intrinsic.Control.CallSub(Connection, "Connect", True)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sCustomer)
F.Intrinsic.Control.CallSub(Connection, "Connect", False)

F.Intrinsic.Control.If(V.Local.sCustomer.Trim, =, "")
	F.Intrinsic.Control.If(V.Args.Customer.Trim, =, "")
		'allow them to select a customer
		F.Intrinsic.UI.Browser(225, "", V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
			F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
			V.Local.sCustomer.Set(V.Local.sRet(0))
			V.Local.sRet.Redim(0, 0)
		F.Intrinsic.Control.Else
			V.Local.bCancel.Set(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		V.Local.sCustomer.Set(V.Args.Customer.Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bCancel.Not)
	F.Intrinsic.Control.If(V.Args.Quote.Trim, =, "")
		F.Intrinsic.Control.CallSub(GetNextQuoteNumber)
		F.Intrinsic.Control.CallSub(UpdateLastQuoteNumber, "LAST_QUOTE", V.Args.Quote)
		V.Local.sQuote.Set(V.Args.Quote)
	F.Intrinsic.Control.Else
		V.Local.sQuote.Set(V.Args.Quote)
	F.Intrinsic.Control.EndIf
	
	'header table
	F.Intrinsic.String.Format(V.DataTable.dtQuote(0).QUOTE_DATE!FieldVal, "YYYYMMDD", V.Local.sOrderDate)
	F.Intrinsic.String.Format(V.DataTable.dtQuote(0).EXPIRATION_DATE!FieldVal, "YYYYMMDD", V.Local.sDueDate)
	F.Data.DataTable.AddRow("ORDUPL", "Transaction", "Q", "OrderNumber", V.Local.sQuote, "CustomerNo", V.Local.sCustomer.Trim, "OrderDate", V.Local.sOrderDate, "OrderDueDate", V.Local.sDueDate, "ContactName", V.DataTable.dtQuote(0).CONTACT!FieldValTrim, "CustomerPO", V.DataTable.dtQuote(0).CUSTOMER_PO!FieldValTrim, "OverrideAutoNumbering", 1)
	
	'extra table
	F.Data.DataTable.AddRow("ORDUPLExtra", "ShipToName", V.DataTable.dtQuote(0).CUSTOMER_NAME!FieldValTrim, "ShipToAddress1", V.DataTable.dtQuote(0).ADDRESS_1!FieldValTrim, "ShipToAddress2", V.DataTable.dtQuote(0).ADDRESS_2!FieldValTrim, "ShipToCity", V.DataTable.dtQuote(0).CITY!FieldValTrim, "ShipToState", V.DataTable.dtQuote(0).STATE!FieldValTrim, "ShipToZip", V.DataTable.dtQuote(0).ZIPCODE!FieldValTrim)
	
	'line table
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtQuoteLines.RowCount--, 1)
		F.Intrinsic.String.LPad(V.Local.iLine.++, "0", 3, V.Local.sLine)
		
		F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "BEFORE_DECIMAL", 9, "AFTER_DECIMAL", 4, "VALUE", V.DataTable.dtQuoteLines(V.Local.iCounter).QUANTITY!FieldValFloat)
		V.Local.sQuantity.Set(V.Args.CALLWRAPPER_DECIMAL)
		F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6, "VALUE", V.DataTable.dtQuoteLines(V.Local.iCounter).UNIT_PRICE!FieldValFloat)
		V.Local.sPrice.Set(V.Args.CALLWRAPPER_DECIMAL)
		F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6, "VALUE", V.DataTable.dtQuoteLines(V.Local.iCounter).UNIT_COST!FieldValFloat)
		V.Local.sCost.Set(V.Args.CALLWRAPPER_DECIMAL)
		F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "BEFORE_DECIMAL", 8, "AFTER_DECIMAL", 4, "VALUE", V.DataTable.dtQuoteLines(V.Local.iCounter).PART_LENGTH!FieldValFloat)
		V.Local.sLength.Set(V.Args.CALLWRAPPER_DECIMAL)
		F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "BEFORE_DECIMAL", 8, "AFTER_DECIMAL", 4, "VALUE", V.DataTable.dtQuoteLines(V.Local.iCounter).PART_WIDTH!FieldValFloat)
		V.Local.sWidth.Set(V.Args.CALLWRAPPER_DECIMAL)
		F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "BEFORE_DECIMAL", 10, "AFTER_DECIMAL", 6, "VALUE", V.DataTable.dtQuoteLines(V.Local.iCounter).EXTENDED_PRICE!FieldValFloat)
		V.Local.sExtension.Set(V.Args.CALLWRAPPER_DECIMAL)
		F.Intrinsic.Control.CallSub(FormatCallwrapperDecimal, "BEFORE_DECIMAL", 7, "AFTER_DECIMAL", 3, "VALUE", V.DataTable.dtQuoteLines(V.Local.iCounter).WEIGHT!FieldValFloat)
		V.Local.sWeight.Set(V.Args.CALLWRAPPER_DECIMAL)
		
		F.Intrinsic.Control.CallSub(GetPartAndRev, "Full_Part", V.DataTable.dtQuoteLines(V.Local.iCounter).PART!FieldValTrim)
		
		F.Data.DataTable.AddRow("ORDUPLLines", "LineNumber", V.Local.sLine, "QtyOrdered", V.Local.sQuantity, "PartNumber", V.Args.Part, "PartRev", V.Args.Rev, "QuotedPrice", V.Local.sPrice, "Cost", V.Local.sCost, "Length", V.Local.sLength, "Width", V.Local.sWidth, "Extension", V.Local.sExtension, "Weight", V.Local.sWeight, "UserField1", V.DataTable.dtQuoteLines(V.Local.iCounter).RECTANGULAR_WEIGHT!FieldValFloat, "PartDesc", V.DataTable.dtQuoteLines(V.Local.iCounter).PART!FieldValTrim)
	F.Intrinsic.Control.Next(V.Local.iCounter)
	
	F.Intrinsic.UI.InvokeWaitDialog("Running quote upload...")
	F.Intrinsic.Control.CallSub(CheckORDUPLParameterFile)
	F.Intrinsic.Control.CallSub(ORDUPLCreateFile)
	F.Intrinsic.Control.CallSub(ORDUPLSync)
	F.Intrinsic.UI.CloseWaitDialog
	
	'check if it uploaded
	F.Intrinsic.String.Build("select QUOTE_NO from V_QUOTE_HEADER where QUOTE_NO = '{0}'", V.Local.sQuote, V.Local.sSQL)
	F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
	
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		'failed
		F.Intrinsic.Control.CallSub(GetORDUPLErrorMessage)
		F.Intrinsic.String.Build("Error uploading quote: [{0}]", V.Args.ORDUPL_ERROR.Trim, V.Local.sMessage)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("Successful upload as quote [{0}].", V.Local.sQuote, V.Local.sMessage)
		
		F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
		
		'clear out old records
		F.Intrinsic.String.Build("delete from GCG_6338_QUOTES where QUOTE = '{0}'", V.DataTable.dtQuote(0).QUOTE!FieldValTrim, V.Local.sSQL)
		F.ODBC.Connection!Con.Execute(V.Local.sSQL)
		F.Intrinsic.String.Build("delete from GCG_6338_QUOTE_LINES where QUOTE_NUMBER = '{0}'", V.DataTable.dtQuote(0).QUOTE!FieldValTrim, V.Local.sSQL)
		F.ODBC.Connection!Con.Execute(V.Local.sSQL)
		F.Intrinsic.String.Build("delete from GCG_6338_ROUTER_LINE where QUOTE = '{0}'", V.DataTable.dtQuote(0).QUOTE!FieldValTrim, V.Local.sSQL)
		F.ODBC.Connection!Con.Execute(V.Local.sSQL)
		
		F.Data.DataTable.AddColumn("dtQuote", "GSS_QUOTE", "String", V.Local.sQuote)
		
		'save to database
		F.Data.DataTable.SaveToDB("dtQuote", "Con", "GCG_6338_QUOTES", "QUOTE", 128, "QUOTE@!@QUOTE*!*CUSTOMER_ID@!@CUSTOMER_ID@!@CUSTOMER_NAME@!@CUSTOMER_NAME*!*QUOTE_DATE@!@QUOTE_DATE*!*EXPIRATION_DATE@!@EXPIRATION_DATE*!*CONTACT@!@CONTACT*!*ADDRESS_1@!@ADDRESS_1*!*ADDRESS_2@!@ADDRESS_2*!*CITY@!@CITY*!*STATE@!@STATE*!*ZIPCODE@!@ZIPCODE*!*CUSTOMER_PO@!@CUSTOMER_PO*!*PRICE@!@PRICE*!*PREPARED_BY_ID@!@PREPARED_BY_ID*!*PREPARED_BY_NAME@!@PREPARED_BY_NAME*!*FILE@!@FILE*!*GSS_QUOTE@!@GSS_QUOTE")
		
		F.Data.DataTable.SaveToDB("dtQuoteLines", "Con", "GCG_6338_QUOTE_LINES", "QUOTE_NUMBER*!*ITEM_ID", 128, "ITEM_ID@!@ITEM_ID*!*PART@!@PART*!*QUANTITY@!@QUANTITY*!*UNIT_PRICE@!@UNIT_PRICE*!*EXTENDED_PRICE@!@EXTENDED_PRICE*!*QUOTE_NUMBER@!@QUOTE_NUMBER*!*UNIT_COST@!@UNIT_COST*!*TOTAL_COST@!@TOTAL_COST*!*MATERIAL_MU@!@MATERIAL_MU*!*PRODUCTION_MU@!@PRODUCTION_MU*!*MATERIAL@!@MATERIAL*!*THICKNESS@!@THICKNESS*!*GRADE@!@GRADE*!*PART_LENGTH@!@PART_LENGTH*!*PART_WIDTH@!@PART_WIDTH*!*WEIGHT@!@WEIGHT*!*RECTANGULAR_WEIGHT@!@RECTANGULAR_WEIGHT*!*PART_AREA@!@PART_AREA*!*RECTANGULAR_AREA@!@RECTANGULAR_AREA*!*ALLOCATE_AREA@!@ALLOCATE_AREA*!*MACHINE_NAME@!@MACHINE_NAME*!*PRODUCTION_TIME@!@PRODUCTION_TIME*!*ALLOCATED_WEIGHT@!@ALLOCATED_WEIGHT*!*PRIME_CODE@!@PRIME_CODE*!*PRODUCTION_COST@!@PRODUCTION_COST")
		
		F.Data.DataTable.SaveToDB("dtRouterLines", "Con", "GCG_6338_ROUTER_LINE", "QUOTE*!*ITEM_ID*!*SECONDARY_PROCESS", 128, "ITEM_ID@!@ITEM_ID*!*PART@!@PART*!*SECONDARY_PROCESS@!@SECONDARY_PROCESS*!*UNIT_COST@!@UNIT_COST*!*EXTENDED_COST@!@EXTENDED_COST*!*QUOTE@!@QUOTE*!*FIXED_TIME@!@FIXED_TIME*!*VARIABLE_TIME@!@VARIABLE_TIME")
		F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
		
		'save quote number so other program can grab it
		F.Global.Registry.AddValue(V.Caller.User, V.Caller.CompanyCode, "GCG_6338_ProNestQuoteImport.g2u", 6338, 0, False, V.Local.sQuote, False, 0, 0, V.Ambient.MinDate, V.Ambient.MinDate)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.UI.Msgbox(V.Local.sMessage)
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("A customer must be selected. Exiting...")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.Upload.End

Program.Sub.LoadDataTables.Start
F.Intrinsic.Control.Try

F.Data.DataTable.Create("dtQuote", True)
F.Data.DataTable.AddColumn("dtQuote", "QUOTE", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "CUSTOMER_ID", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "CUSTOMER_NAME", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "QUOTE_DATE", "Date")
F.Data.DataTable.AddColumn("dtQuote", "EXPIRATION_DATE", "Date")
F.Data.DataTable.AddColumn("dtQuote", "CONTACT", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "ADDRESS_1", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "ADDRESS_2", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "CITY", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "STATE", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "ZIPCODE", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "CUSTOMER_PO", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "PRICE", "Float", 0)
F.Data.DataTable.AddColumn("dtQuote", "PREPARED_BY_ID", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "PREPARED_BY_NAME", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_1", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_2", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_3", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_4", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_5", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_6", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_7", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_8", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_9", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_10", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_11", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_12", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_13", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILLER_14", "String", "")
F.Data.DataTable.AddColumn("dtQuote", "FILE", "String", "")

F.Data.DataTable.Create("dtQuoteLines", True)
F.Data.DataTable.AddColumn("dtQuoteLines", "ITEM_ID", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "PART", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "QUANTITY", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "UNIT_PRICE", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "EXTENDED_PRICE", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "QUOTE_NUMBER", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "UNIT_COST", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "TOTAL_COST", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "MATERIAL_MU", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "PRODUCTION_MU", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "MATERIAL", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "THICKNESS", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "GRADE", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "PART_LENGTH", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "PART_WIDTH", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "WEIGHT", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "RECTANGULAR_WEIGHT", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "PART_AREA", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "RECTANGULAR_AREA", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "ALLOCATE_AREA", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "MACHINE_NAME", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "PRODUCTION_TIME_TEMP", "String", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "ALLOCATED_WEIGHT", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "PRIME_CODE", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "PRODUCTION_COST", "Float", 0)
F.Data.DataTable.AddColumn("dtQuoteLines", "FILLER_1", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "FILLER_2", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "FILLER_3", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "FILLER_4", "String", "")
F.Data.DataTable.AddColumn("dtQuoteLines", "FILLER_5", "String", "")

F.Data.DataTable.Create("dtRouterLines", True)
F.Data.DataTable.AddColumn("dtRouterLines", "ITEM_ID", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "PART", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "SECONDARY_PROCESS", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "UNIT_COST", "Float", 0)
F.Data.DataTable.AddColumn("dtRouterLines", "EXTENDED_COST", "Float", 0)
F.Data.DataTable.AddColumn("dtRouterLines", "FIXED_TIME_TEMP", "String", 0)
F.Data.DataTable.AddColumn("dtRouterLines", "VARIABLE_TIME_TEMP", "String", 0)
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_1", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_2", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_3", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_4", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_5", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_6", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_7", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_8", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_9", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_10", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_11", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_12", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_13", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_14", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_15", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_16", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_17", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_18", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_19", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_20", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_21", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "FILLER_22", "String", "")
F.Data.DataTable.AddColumn("dtRouterLines", "QUOTE", "String", "")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.LoadDataTables.End

Program.Sub.FormatCallwrapperDecimal.Start
'pass VALUE, BEFORE_DECIMAL, AFTER_DECIMAL
'returns CALLWRAPPER_DECIMAL, formatted

F.Intrinsic.Control.Try

V.Local.sValue.Declare(String)

F.Intrinsic.String.Format(V.Args.VALUE, "0.00", V.Local.sValue)
F.Intrinsic.String.Split(V.Local.sValue, ".", V.Local.sValue)

F.Intrinsic.String.LPad(V.Local.sValue(0), "0", V.Args.BEFORE_DECIMAL, V.Local.sValue(0))
F.Intrinsic.String.RPad(V.Local.sValue(1), "0", V.Args.AFTER_DECIMAL, V.Local.sValue(1))

F.Intrinsic.String.Join(V.Local.sValue, "", V.Local.sValue)
V.Local.sValue.RedimPreserve(0, 0)

F.Intrinsic.Variable.AddRV("CALLWRAPPER_DECIMAL", V.Local.sValue)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.FormatCallwrapperDecimal.End

Program.Sub.CheckORDUPLParameterFile.Start
'check if the GSSPARAMccc exists for the Order uploader, create the directories

F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFileContents.Declare(String)
V.Local.sOrderDirectory.Declare(String)
V.Local.sErrorDirectory.Declare(String)
V.Local.sConvertedDirectory.Declare(String)
V.Local.sUploadedDirectory.Declare(String)
V.Local.sDirectories.Declare(String)

F.Intrinsic.String.Build("{0}\GSSPARAM{1}.txt", V.Caller.FilesDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.File.Exists(V.Local.sPath, V.Local.bExists)

F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.Control.CallSub(CreateORDUPLParameterFile)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetWebImporterParameters)
F.Intrinsic.String.Build("{0}*!*{1}*!*{2}*!*{3}", V.Args.ORDER_DIRECTORY.Trim, V.Args.ERROR_DIRECTORY.Trim, V.Args.CONVERTED_DIRECTORY.Trim, V.Args.UPLOADED_DIRECTORY.Trim, V.Local.sDirectories)
F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sDirectories)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.CheckORDUPLParameterFile.End

Program.Sub.CreateORDUPLParameterFile.Start
'create the default order uploader parameter file

F.Intrinsic.Control.Try

V.Local.sParams.Declare(String)
V.Local.sPath.Declare(String)

F.Intrinsic.String.Build("WEB ORDER DIRECTORY   = {1}\WEB_ORDERS\{2}{0}WEB ERROR DIRECTORY   = {1}\WEB_ORDERS\{2}\WEB_ERRORS{0}WEB CONVERTED DIR     = {1}\WEB_ORDERS\{2}\CONVERTED{0}WEB UPLOADED DIRECTORY= {1}\WEB_ORDERS\{2}\UPLOADED{0}EMAIL FROM ADDRESS    = {0}EMAIL TO ADDRESS      = ", V.Ambient.NewLine, V.Caller.FilesDir, V.Caller.CompanyCode, V.Local.sParams)
F.Intrinsic.String.Build("{0}\GSSPARAM{1}.txt", V.Caller.FilesDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.File.String2File(V.Local.sPath, V.Local.sParams)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.CreateORDUPLParameterFile.End

Program.Sub.GetWebImporterParameters.Start
'returns web importer parameter file information
'returns ORDER_DIRECTORY, ERROR_DIRECTORY, CONVERTED_DIRECTORY, UPLOADED_DIRECTORY, EMAIL_FROM, EMAIL_TO

F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sWebOrderFolder.Declare(String, "")
V.Local.sWebErrorFolder.Declare(String, "")
V.Local.sWebConvertedFolder.Declare(String, "")
V.Local.sWebUploadedFolder.Declare(String, "")
V.Local.sEmailFrom.Declare(String, "")
V.Local.sEmailTo.Declare(String)
V.Local.sFileContents.Declare(String)

F.Intrinsic.String.Build("{0}\GSSPARAM{1}.txt", V.Caller.FilesDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.File.Exists(V.Local.sPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	'read in file, split rows
	F.Intrinsic.File.File2String(V.Local.sPath, V.Local.sFileContents)
	F.Intrinsic.String.Split(V.Local.sFileContents, V.Ambient.NewLine, V.Local.sFileContents)
	
	F.Intrinsic.Control.If(V.Local.sFileContents.UBound, >, 4)
		F.Intrinsic.String.Split(V.Local.sFileContents(0), "=", V.Local.sWebOrderFolder)
		F.Intrinsic.String.Split(V.Local.sFileContents(1), "=", V.Local.sWebErrorFolder)
		F.Intrinsic.String.Split(V.Local.sFileContents(2), "=", V.Local.sWebConvertedFolder)
		F.Intrinsic.String.Split(V.Local.sFileContents(3), "=", V.Local.sWebUploadedFolder)
		F.Intrinsic.String.Split(V.Local.sFileContents(4), "=", V.Local.sEmailFrom)
		F.Intrinsic.String.Split(V.Local.sFileContents(5), "=", V.Local.sEmailTo)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("ORDER_DIRECTORY", V.Local.sWebOrderFolder(1).Trim)
F.Intrinsic.Variable.AddRV("ERROR_DIRECTORY", V.Local.sWebErrorFolder(1).Trim)
F.Intrinsic.Variable.AddRV("CONVERTED_DIRECTORY", V.Local.sWebConvertedFolder(1).Trim)
F.Intrinsic.Variable.AddRV("UPLOADED_DIRECTORY", V.Local.sWebUploadedFolder(1).Trim)
F.Intrinsic.Variable.AddRV("EMAIL_FROM", V.Local.sEmailFrom(1).Trim)
F.Intrinsic.Variable.AddRV("EMAIL_TO", V.Local.sEmailTo(1).Trim)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.GetWebImporterParameters.End

Program.Sub.GetPartAndRev.Start
'pass FULL_PART
'returns PART and REV

F.Intrinsic.Control.Try

V.Local.sPart.Declare(String)
V.Local.sRev.Declare(String)
V.Local.iLength.Declare(Long)

V.Local.sPart.Set(V.Args.FULL_PART.Trim)
F.Intrinsic.Control.If(V.Local.sPart.Length, >, 17)
	F.Intrinsic.Math.Sub(V.Local.sPart.Length, 17, V.Local.iLength)
	F.Intrinsic.String.Right(V.Local.sPart, V.Local.iLength, V.Local.sRev)
	V.Local.sPart.Set(V.Local.sPart.Left17)
F.Intrinsic.Control.Else
	V.Local.sReV.Set("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("PART", V.Local.sPart)
F.Intrinsic.Variable.AddRV("REV", V.Local.sRev)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.GetPartAndRev.End

Program.Sub.GetORDUPLErrorMessage.Start
F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sMessage.Declare(String, "Unspecified error occured.")
V.Local.bExists.Declare(Boolean)
V.Local.sFilter.Declare(String)
V.Local.sUploadFile.Declare(String)

'read in the ORDUPL error log
F.Intrinsic.String.Build("{0}\ORDUP{1}.ERR", V.Caller.FilesDir, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.File.Exists(V.Local.sPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sPath, V.Local.sContents)
	
	'clean it up a bit
	F.Intrinsic.String.RegExReplace(V.Local.sContents, " {2,}", " ", True, True, V.Local.sContents)
	F.Intrinsic.String.RegExReplace(V.Local.sContents, "\| +", "|", True, True, V.Local.sContents)
	F.Data.DataTable.CreateFromString("dtOrduplError", V.Local.sContents, "Message_1*!*Message_2*!*Date*!*Time*!*File", "String*!*String*!*String*!*String*!*String", "|", V.Ambient.NewLine)
	
	'make sure it has data
	F.Intrinsic.Control.If(V.DataTable.dtOrduplError.RowCount, >, 0)
		'delete blank last row
		F.Data.DataTable.DeleteRow("dtOrduplError",V.DataTable.dtOrduplError.RowCount--)
		
		'check for error message
		V.Local.sUploadFile.Set(V.DataTable.dtOrduplError(V.DataTable.dtOrduplError.RowCount--).FILE!FieldValTrim)
		F.Intrinsic.String.Build("File = '{0}' and Message_1 not in ('Program: ORDUPL Message: Success Message', 'Program: ORDUP1  Message: Order error')", V.Local.sUploadFile, V.Local.sFilter)
		F.Data.DataView.Create("dtOrduplError", "dvORDUPLError", 22, V.Local.sFilter, "")
		
		'get error message(s)
		F.Intrinsic.Control.If(V.DataView.dtOrduplError!dvORDUPLError.RowCount, >, 0)
			F.Data.DataView.ToString("dtOrduplError", "dvORDUPLError", "Message_2", "***NODELIMITER***", V.Ambient.NewLine, V.Local.sMessage)
		F.Intrinsic.Control.EndIf
		F.Data.DataView.Close("dtOrduplError", "dvORDUPLError")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.Close("dtOrduplError")
F.Intrinsic.Control.EndIf

'replace with some more user friendly error messages
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0400 Pgm=ORDUP3 GL Account Required, GL Account Missing!", "GL Account not found. Make sure the part exists, has a valid product line, and the product line has a valid GL account, or the customer has an associated GL account, or there is a default sales GL account set up.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0700 Pgm=ORDUP2User 3 Field Required", "Header User field 3 is required because the option to make it required is on. Make sure a User Field 3 is being passed for the order header.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0820 Pgm=ORDUP2Duplicate Order Number", "This order number already exists.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0220 Pgm=ORDUP2 Customer is on Credit Hold:", "This customer is on Credit Hold:", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0230 Pgm=ORDUP1Invalid Line Order Date Must be CCYYMMDD", "Invalid Line Order Date Format. If the date was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0230 Pgm=ORDUP1Invalid Promise Order Date Must be CCYYMMDD", "Invalid Line Promise Date Format. If the date was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0210 Pgm=ORDUP1Invalid Transaction, must be O(der), Q(uote)", "Invalid Transaction Code. Only O for Order and Q for Quote are accepted. If the transaction code was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0210 Pgm=ORDUP1Missing Part Number", "No Part number passed. If the part number was passed correctly, this likely means the WebImporter file is bad, either due to unexpected newlines or unicode characters.", V.Local.sMessage)
F.Intrinsic.String.Replace(V.Local.sMessage, "ERROR: Par=0210 Pgm=ORDUP1Invalid Prospect, not found", "This customer/prospect does not exist.", V.Local.sMessage)

F.Intrinsic.Variable.AddRV("ORDUPL_UPLOAD_FILE", V.Local.sUploadFile)
F.Intrinsic.Variable.AddRV("ORDUPL_ERROR", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.GetORDUPLErrorMessage.End

Program.Sub.GetNextQuoteNumber.Start
'grab the next quote number from options

F.Intrinsic.Control.Try

V.Local.sQuote.Declare(String)
V.Local.bDone.Declare(Boolean, False)
V.Local.iLastQuote.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iReturn.Declare(Long)

F.Global.General.ReadOption(401312, 3, "", 0, V.Local.sQuote)
F.Intrinsic.Math.Add(V.Local.sQuote, 1, V.Local.iLastQuote)

'make sure no duplicates
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Intrinsic.Control.DoUntil(V.Local.bDone)
	'generate quote number
	F.Intrinsic.String.LPad(V.Local.iLastQuote, "0", 7, V.Local.sQuote)
	
	'check if it exists in quote header
	F.Intrinsic.String.Build("select RTRIM(QUOTE_NO) QUOTE_NO from V_QUOTE_HEADER where QUOTE_NO = '{0}'", V.Local.sQuote, V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		'check if it's locked
		F.Global.General.ReadSoftLock("QT", V.Local.sQuote, V.Local.iReturn)
		F.Intrinsic.Control.If(V.Local.iReturn, =, 0)
			V.Local.bDone.Set(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Local.iLastQuote, 1, V.Local.iLastQuote)
F.Intrinsic.Control.Loop
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Variable.AddRV("QUOTE", V.Local.sQuote)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.GetNextQuoteNumber.End

Program.Sub.Connection.Start
'open or close connection if necessary, keep track of all connections

F.Intrinsic.Control.Try

V.Static.iConnections.Declare(Long)

F.Intrinsic.Control.If(V.Args.Connect)
	F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
		F.ODBC.Connection!Con.OpenCompanyConnection
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Static.iConnections, 1, V.Static.iConnections)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Static.iConnections, >, 0)
		F.Intrinsic.Math.Sub(V.Static.iConnections, 1, V.Static.iConnections)
		
		F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
			F.ODBC.Connection!Con.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.Connection.End

Program.Sub.UpdateLastQuoteNumber.Start
'save last quote number back to database

F.Intrinsic.Control.Try

F.Global.General.SaveOption(401312, 0, "", "", "", "", "", "", V.Args.LAST_QUOTE.Long)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.UpdateLastQuoteNumber.End

Program.Sub.DeleteQuote.Start
F.Intrinsic.Control.Try

V.Local.sQuote.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sTables.Declare(String)
V.Local.sKeys.Declare(String)

'quote tables
'--QORDRPLA--
'QUOTE_BILL_TO
'QUOTE_HEADER
'QUOTE_LINES
'QUOTE_SHIP_TO

'QUOTE_SHIP_SCHED
'SHIP_SCHED_Q
'CONFIG_QTE_INSERT
'CONFIG_QUOTE
'QT_CONFIG_NOTES
'QUOTE_CONFIG
'QUOTE_TAX
'QUOTE_LN_TEXT
'QUOTE_HF_TEXT
'QTE_HD_NOTE
'QTE_LN_NOTE

'leaving anything not created by the upload for now
F.Intrinsic.String.Split("QUOTE_HEADER*!*QUOTE_HF_TEXT*!*QUOTE_LN_TEXT", "*!*", V.Local.sTables)
F.Intrinsic.String.Split("QUOTE_NO*!*QUOTE_NO*!*QUOTE_NUMBER", "*!*", V.Local.sKeys)

F.Intrinsic.String.LPad(V.Args.Quote.Trim, "0", 7, V.Local.sQuote)

'loop through the tables set above and delete from them
F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sTables.UBound, 1)
	F.Intrinsic.String.Build("delete from {0} where {1} = '{2}'", V.Local.sTables(V.Local.iCounter), V.Local.sKeys(V.Local.iCounter), V.Local.sQuote, V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Unattended", True, "Callback", "Exit", "Project", "5807", "ProjectTitle", "SOAP Uploader", "Task", "Order_Upload", "WRITE_LOG_FILE", True)
F.Intrinsic.Control.EndTry
Program.Sub.DeleteQuote.End

Program.Sub.CheckDirectories.Start
'check if the given import directories exist
'create them if they don't
'pass directories delimited with *!*

F.Intrinsic.Control.Try

V.Local.sDirectories.Declare(String)
V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.iCounter.Declare(Long)

V.Local.sDirectories.Set(V.Args.Directories)
F.Intrinsic.String.Split(V.Local.sDirectories, "*!*", V.Local.sDirectories)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sDirectories.UBound, 1)
	V.Local.sPath.Set(V.Local.sDirectories(V.Local.iCounter))
	F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.File.CreateDir(V.Local.sPath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.CheckDirectories.End

Program.Sub.AddLogFile.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder)
'pass type (subfolder)
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sName.Declare(String)

F.Intrinsic.File.MakeFilenameFriendly(V.Args.Project, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log\{3}\", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Args.Type, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.StripCharacters(V.Ambient.Now, V.Local.sName)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sName, V.Local.sFile)
F.Intrinsic.File.String2File(V.Local.sFile, V.Args.Message.Trim)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6338", "Task", "GCG_6338_ProNestQuoteImport")
F.Intrinsic.Control.EndTry
Program.Sub.AddLogFile.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called

F.Intrinsic.Control.Try

V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)
V.Static.bError.Declare(Boolean, False)
V.Local.sDoubleNewLine.Declare(String)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Static.bError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf
V.Static.bError.Set(True)

F.Intrinsic.String.Build("{6}{1}{1}Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Args.Subroutine, V.Args.ErrorNumber, V.Args.ErrorDescription, V.Ambient.GABVersion, V.Ambient.Now, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE, "TASK", V.Args.Task)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("WRITE_LOG_FILE", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.WRITE_LOG_FILE)
		F.Intrinsic.String.Build("{0}{0}", V.Ambient.NewLine, V.Local.sDoubleNewLine)
		F.Intrinsic.String.Replace(V.Local.sError, V.Local.sDoubleNewLine, V.Ambient.NewLine, V.Local.sError)
		
		F.Intrinsic.String.Build("Time: {0}{1}User: {2}{1}Windows User: {3}{1}Machine: {4}{1}PID: {5}{1}Terminal: {6}{1}Caller: {7}{1}Synchronous: {8}{1}Thread ID: {9}{1}Pervasive Client: {10}{1}GAB Version: {11}{1}GSS Version: {12}{1}Error: {13}{1}Error Description: {14}{1}Script: {15}{1}Subroutine: {16}", V.Ambient.Now, V.Ambient.NewLine, V.Caller.User, V.System.UserName, V.System.ComputerName, V.Ambient.PID, V.Caller.Terminal, V.Caller.Caller, V.Caller.Sync,  V.Ambient.ThreadID, V.Ambient.PervasiveClientVersion, V.Ambient.GABVersion, V.Caller.GSSVersion, V.Args.ErrorNumber, V.Args.ErrorDescription, V.Caller.ScriptFile, V.Args.Subroutine, V.Local.sError)
		
		F.Intrinsic.Control.CallSub(AddLogFile, "PROJECT", V.Args.Project, "TYPE", V.Args.Task, "MESSAGE", V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$rseddon$}$20210502210431445$}$DkKb6sybY9hE3N0enyRwKJuHSlMGTgRbEy5XZH4WCtUS8hKBNUwpoutO2QZ7dFA5C3aECkSNl5c=
Program.Sub.Comments.End